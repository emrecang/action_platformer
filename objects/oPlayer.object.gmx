<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>sPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

facing = 1;

groundAccel = 1.00;
groundFric  = 2.00;
airAccel    = 0.75;
airFric     = 0.01;
vxMax       = 5.50;
vyMax       = 10.0;
jumpHeight  = 6.00;
gravNorm    = 0.50;
gravSlide   = 0.25; 

clingTime   = 2.0;

IDLE     = 10;
RUN      = 11;
JUMP     = 12;
ROLL     = 13;

state  = IDLE;
facing = image_xscale;

xscale = 1;
yscale = 1;

attacking = false;
blocking  = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0, 0, oFxRoomRestart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attacking = false;
state     = IDLE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumped = false;
landed = false;

if (vy &lt; 1 &amp;&amp; vy &gt; -1)
    PlatformCheck();
else
    repeat(abs(vy)) {
        if (!PlatformCheck())
            y += sign(vy);
        else
            break;
    }

if (platformTarget) {
    if (!onGround)
        landed = true;
    
    if (landed)
        with (platformTarget) other.vy = 0;
    else
        with (platformTarget) other.vy = 0;
}

repeat(abs(vx)) {
    if (place_meeting(x + sign(vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y - 1, oParSolid))
        y -= 1;
         
    if (place_meeting(x + sign(vx), y + 2, oParSolid) &amp;&amp; !place_meeting(x + sign(vx), y + 1, oParSolid))
        y += 1;
      
    
    if (place_meeting(x + sign(vx), y, oPushBlock)) {
        
        vx = clamp(vx, -1, 1);
            
        with (instance_place(x + sign(vx), y, oPushBlock)) {
            
            if (place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y - 1, oParSolid))
                --y;
            
            
            if (!place_meeting(x + sign(other.vx), y, oParSolid) &amp;&amp; !place_meeting(x + sign(other.vx), y + 1, oParSolid) &amp;&amp; place_meeting(x + sign(other.vx), y + 2, oParSolid))
                ++y;        

            if (!place_meeting(x + sign(other.vx), y, oParSolid))
                x += sign(other.vx); 
            else {
                other.h = 0;
                break;
            }        
        }
    }          
          
    if (!place_meeting(x + sign(vx), y, oParSolid))
        x += sign(vx);
    else
        vx = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

if (onGround &amp;&amp; !onGroundPrev) {
    for (var i = 0; i &lt; 4; ++i) {
        instance_create(x + random_range(-8, 8), y + 8 + random_range(-2, 2), oParticlePlayer);
    }
    
    xscale = 1.33;
    yscale = 0.67;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var kLeft, kRight, kUp, kDown, kJump, kJumpRelease, kAction, kBlock, kRollL, kRollR, tempAccel, tempFric;

kLeft        = keyboard_check(ord("A"))  || gamepad_axis_value(0, gp_axislh) &lt; -0.4;
kRight       = keyboard_check(ord("D")) || gamepad_axis_value(0, gp_axislh) &gt;  0.4;
kUp          = keyboard_check(ord("W"))    || gamepad_axis_value(0, gp_axislv) &lt; -0.4;
kDown        = keyboard_check(ord("S"))  || gamepad_axis_value(0, gp_axislv) &gt;  0.4;

kJump        = keyboard_check_pressed(ord('K'))  || gamepad_button_check_pressed(0, gp_face1);
kJumpRelease = keyboard_check_released(ord('K')) || gamepad_button_check_released(0, gp_face1);

kAction      = keyboard_check_pressed(ord('J'))  || gamepad_button_check_pressed(0, gp_face3);
kBlock       = keyboard_check(ord('L'))          || gamepad_button_check(0, gp_face2);
kRollL       = keyboard_check_pressed(ord('Q'))  || gamepad_button_check_pressed(0, gp_shoulderlb);
kRollR       = keyboard_check_pressed(ord('E'))  || gamepad_button_check_pressed(0, gp_shoulderrb);

if (instance_exists(oTouchCompatible)) {
    device_mouse_dbclick_enable(false);
    
    for (var i = 0; i &lt; 8; ++i) {
        if (!kLeft)
            kLeft = device_mouse_check_button(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 16 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 16 + 64 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 280 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 280 + 64;
        if (!kRight)
        kRight = device_mouse_check_button(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 16 + 80 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 16 + 64 + 80 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 280 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 280 + 64;   
        
        if (!kJump)
            kJump = device_mouse_check_button_pressed(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 640 - 64 - 16 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 640 - 16 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 280 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 280 + 64;
        if (!kJumpRelease)
            kJumpRelease = device_mouse_check_button_released(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 640 - 64 - 16 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 640 - 16 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 280 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 280 + 64;
        
        if (!kAction)
            kAction = device_mouse_check_button_pressed(i, mb_left) &amp;&amp; device_mouse_x(i) &gt; view_xview[0] + 640 - 64 - 16 - 80 &amp;&amp; device_mouse_x(i) &lt; view_xview[0] + 640 - 16 - 80 &amp;&amp; device_mouse_y(i) &gt; view_yview[0] + 280 &amp;&amp; device_mouse_y(i) &lt; view_yview[0] + 280 + 64;
    }
     

}

if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}


if ((!cRight &amp;&amp; !cLeft) || onGround) {
    canStick = true;
    sticking = false;
}   


if (((kRight &amp;&amp; cLeft) || (kLeft &amp;&amp; cRight)) &amp;&amp; canStick &amp;&amp; !onGround) {
    alarm[0] = clingTime;
    sticking = true; 
    canStick = false;       
}


if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
       
        vy = Approach(vy, vyMax, gravSlide);
    } else {
        
        vy = Approach(vy, vyMax, gravNorm);
    }
}

if (state != ROLL) {

if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking) {
    facing = -1;
    state  = RUN;
   
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax, tempAccel);

} else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
    facing = 1;
    state  = RUN;
    
    
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax, tempAccel);
}
}


if (!kRight &amp;&amp; !kLeft) {
    vx = Approach(vx, 0, tempFric);
    
    if (state != ROLL)
        state = IDLE;
} 
       

if (kJump &amp;&amp; cLeft &amp;&amp; !onGround) {
    yscale = 1.33;
    xscale = 0.67;
            
    if (kLeft) {
        vy = -jumpHeight * 1.2;
        vx =  jumpHeight * .66;
    } else {
        vy = -jumpHeight * 1.1;
        vx =  vxMax; 
    }  
}

if (kJump &amp;&amp; cRight &amp;&amp; !onGround) {
    yscale = 1.33;
    xscale = 0.67;
    
    if (kRight) {
        vy = -jumpHeight * 1.2;
        vx = -jumpHeight * .66;
    } else {
        vy = -jumpHeight * 1.1;
        vx = -vxMax;
    }  
}
 

if (kJump) { 
    if (onGround) {
        
        if (kDown) {
            if (place_meeting(x, y + 1, oParJumpThru))
                ++y;
        } else {
            vy = -jumpHeight;
            
            yscale = 1.33;
            xscale = 0.67;
        }
    }

} else if (kJumpRelease) { 
    if (vy &lt; 0)
        vy *= 0.25;
}


if (!onGround)
    state = JUMP;

else if (random(100) &gt; 85 &amp;&amp; abs(vx) &gt; 0.5)
    instance_create(x, y + 8, oParticlePlayer);


if (cRight &amp;&amp; !onGround)
    facing = -1;
else if (cLeft &amp;&amp; !onGround)
    facing = 1;


if (onGround &amp;&amp; !attacking) {
    if (state != ROLL) {
        if (kRollL) {
            facing = -1;
            
            image_index  = 0;
            image_speed  = 0.5;
            sprite_index = sPlayerRoll;
            
            state = ROLL;
        } else if (kRollR) {
            facing = 1;
            
            image_index  = 0;
            image_speed  = 0.5;
            sprite_index = sPlayerRoll;
            
            state = ROLL;
        }
    }
}


if (state == ROLL) {
    vx = facing * 6;
    
    
    if (!onGround || (cLeft || cRight)) {
        state = IDLE;
        if (!attacking)
            alarm[1] = -1;
    }
}
    

if (!kBlock &amp;&amp; kAction) {
    if (!attacking) {
        
        if (onGround &amp;&amp; state == ROLL) {
            image_index  = 0;
            image_speed  = 0.5;
            sprite_index = sPlayerRollSlash;
            
            alarm[1]  = 8; 
            attacking = true;       
        
        } else  {
            image_index  = 0;
            image_speed  = 0.33;
            sprite_index = sPlayerJab;
            
            attacking = true;
        }
    }
}

blocking = kBlock;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xscale = Approach(xscale, 1, 0.05);
yscale = Approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (oPlayerAtkBox)
    instance_destroy();


if (sprite_index == sPlayerRollSlash) {    
    with (instance_create(x, y, oPlayerAtkBox)) {
        bboxleft  = min(other.x + (5 * other.facing), other.x + (24 * other.facing));
        bboxright = max(other.x + (5 * other.facing), other.x + (24 * other.facing));
        
        bboxtop    = other.y - 1;
        bboxbottom = other.y + 8; 
    }
}

if (sprite_index == sPlayerJab &amp;&amp; round(image_index) &gt; 0) {    
    with (instance_create(x, y, oPlayerAtkBox)) {
        bboxleft  = min(other.x + (5 * other.facing), other.x + (30 * other.facing));
        bboxright = max(other.x + (5 * other.facing), other.x + (30 * other.facing));
        
        bboxtop    = other.y - 1;
        bboxbottom = other.y + 8; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == sPlayerJab)
    attacking = false;
    
if (sprite_index == sPlayerRoll) {
    if (!attacking)
        alarm[1] = -1;
            
    state = IDLE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!attacking) {
    switch (state) {
        case IDLE: 
            image_speed = 0.2;
            
            if (blocking)
                sprite_index = sPlayerIdleShield;
            else
                sprite_index = sPlayerIdle;
        break;
        
        case RUN: 
            image_speed = 0.33; 
            
            if (blocking)
                sprite_index = sPlayerRunShield;
            else
                sprite_index = sPlayerRun;
        break;
        
        case JUMP:
        
            if (!(place_meeting(x, y + 2, oParSolid) &amp;&amp; vy != 0) &amp;&amp; vy &gt;= -1.0 &amp;&amp; vy &lt;= 1.0) {  
                if (blocking)
                    sprite_index = sPlayerJumpMShield;
                else
                    sprite_index = sPlayerJumpM;  
           } else { 
                
                if (vy &lt;= 0) {
                    if (blocking)
                        sprite_index = sPlayerJumpUShield;
                    else  
                        sprite_index = sPlayerJumpU;  
                } else {
                    if (blocking)
                        sprite_index = sPlayerJumpDShield;
                    else
                        sprite_index = sPlayerJumpD;
                }
            }
             
               
            if (cRight || cLeft)
                if (blocking)
                    sprite_index = sPlayerSlideShield;
                else
                    sprite_index = sPlayerSlide;  
        break;
        
        case ROLL:
               
        break;
    }
}

if (onGround)
    draw_sprite_ext(sprite_index, image_index, x, y + (16 - 16 * yscale) * 0.25, facing * xscale, yscale, 0, c_white, image_alpha);    
else
    draw_sprite_ext(sprite_index, image_index, x, y, facing * xscale, yscale, 0, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
